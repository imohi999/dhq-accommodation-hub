generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String       @id @default(uuid())
  username        String       @unique
  email           String       @unique
  hashedPassword  String       @map("hashed_password")
  emailVerified   DateTime?    @map("email_verified")
  image           String?
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")
  profile         Profile?
  sessions        AuthSession[]
  rolesAssignedBy UserRole[]   @relation("AssignedBy")
  rolesAssigned   UserRole[]   @relation("AssignedRoles")
  auditLogs       AuditLog[]

  @@index([username])
  @@map("users")
}

model AuthSession {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  ipAddress    String   @map("ip_address")
  userAgent    String?  @map("user_agent")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionToken])
  @@map("auth_sessions")
}

model AuditLog {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  action     String
  entityType String?  @map("entity_type")
  entityId   String?  @map("entity_id")
  oldData    Json?    @map("old_data")
  newData    Json?    @map("new_data")
  ipAddress  String   @map("ip_address")
  userAgent  String?  @map("user_agent")
  createdAt  DateTime @default(now()) @map("created_at")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([entityType, entityId])
  @@index([createdAt])
  @@map("audit_logs")
}

model Profile {
  id              String           @id @default(uuid())
  userId          String           @unique @map("user_id")
  fullName        String?          @map("full_name")
  role            AppRole          @default(user)
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  pagePermissions PagePermission[]

  @@map("profiles")
}

model UserRole {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  role       AppRole
  assignedAt DateTime @default(now()) @map("assigned_at")
  assignedBy String?  @map("assigned_by")
  assigner   User?    @relation("AssignedBy", fields: [assignedBy], references: [id])
  user       User     @relation("AssignedRoles", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, role])
  @@index([userId])
  @@map("user_roles")
}

model Queue {
  id                  String              @id @default(uuid())
  sequence            Int                 @unique
  fullName            String              @map("full_name")
  svcNo               String              @unique @map("svc_no")
  gender              String
  armOfService        String              @map("arm_of_service")
  category            String
  rank                String
  maritalStatus       String              @map("marital_status")
  noOfAdultDependents Int                 @default(0) @map("no_of_adult_dependents")
  noOfChildDependents Int                 @default(0) @map("no_of_child_dependents")
  currentUnit         String?             @map("current_unit")
  appointment         String?
  dateTos             DateTime?           @map("date_tos") @db.Date
  dateSos             DateTime?           @map("date_sos") @db.Date
  phone               String?
  entryDateTime       DateTime            @default(now()) @map("entry_date_time")
  createdAt           DateTime            @default(now()) @map("created_at")
  updatedAt           DateTime            @updatedAt @map("updated_at")
  dependents          Json?               @map("dependents")
  hasAllocationRequest Boolean            @default(false) @map("has_allocation_request")
  unitOccupants       UnitOccupant[]
  allocationRequests  AllocationRequest[]
  pastAllocations     PastAllocation[]
  currentlyOccupying  DhqLivingUnit[]   @relation("CurrentOccupant")

  @@index([sequence])
  @@index([svcNo])
  @@index([hasAllocationRequest])
  @@map("queue")
}

model Unit {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("units")
}

model DhqLivingUnit {
  id                           String              @id @default(uuid())
  quarterName                  String              @map("quarter_name")
  location                     String
  category                     String
  accommodationTypeId          String              @map("accommodation_type_id")
  noOfRooms                    Int                 @default(0) @map("no_of_rooms")
  status                       String              @default("Vacant")
  typeOfOccupancy              String              @default("Single") @map("type_of_occupancy")
  bq                           Boolean             @default(false)
  noOfRoomsInBq                Int                 @default(0) @map("no_of_rooms_in_bq")
  blockName                    String              @map("block_name")
  flatHouseRoomName            String              @map("flat_house_room_name")
  unitName                     String?             @map("unit_name")
  blockImageUrl                String?             @map("block_image_url")
  currentOccupantId            String?             @map("current_occupant_id")
  currentOccupantName          String?             @map("current_occupant_name")
  currentOccupantRank          String?             @map("current_occupant_rank")
  currentOccupantServiceNumber String?             @map("current_occupant_service_number")
  occupancyStartDate           DateTime?           @map("occupancy_start_date") @db.Date
  createdAt                    DateTime            @default(now()) @map("created_at")
  updatedAt                    DateTime            @updatedAt @map("updated_at")
  allocationRequests           AllocationRequest[]
  accommodationType            AccommodationType   @relation(fields: [accommodationTypeId], references: [id])
  currentOccupant              Queue?              @relation("CurrentOccupant", fields: [currentOccupantId], references: [id])
  history                      UnitHistory[]
  inventory                    UnitInventory[]
  maintenance                  UnitMaintenance[]
  occupants                    UnitOccupant[]
  pastAllocations              PastAllocation[]

  @@index([status])
  @@index([unitName])
  @@index([accommodationTypeId])
  @@map("dhq_living_units")
}

model UnitOccupant {
  id                 String        @id @default(uuid())
  unitId             String        @map("unit_id")
  queueId            String       @map("queue_id")
  fullName           String        @map("full_name")
  rank               String
  serviceNumber      String        @map("service_number")
  phone              String?
  email              String?
  emergencyContact   String?       @map("emergency_contact")
  occupancyStartDate DateTime      @default(now()) @map("occupancy_start_date") @db.Date
  isCurrent          Boolean       @default(true) @map("is_current")
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @updatedAt @map("updated_at")
  unit               DhqLivingUnit @relation(fields: [unitId], references: [id], onDelete: Cascade)
  queue              Queue        @relation(fields: [queueId], references: [id])

  @@index([unitId])
  @@index([isCurrent])
  @@index([queueId])
  @@map("unit_occupants")
}

model UnitHistory {
  id               String        @id @default(uuid())
  unitId           String        @map("unit_id")
  occupantName     String        @map("occupant_name")
  rank             String
  serviceNumber    String        @map("service_number")
  startDate        DateTime      @map("start_date") @db.Date
  endDate          DateTime?     @map("end_date") @db.Date
  durationDays     Int?          @map("duration_days")
  reasonForLeaving String?       @map("reason_for_leaving")
  createdAt        DateTime      @default(now()) @map("created_at")
  unit             DhqLivingUnit @relation(fields: [unitId], references: [id], onDelete: Cascade)

  @@index([unitId])
  @@map("unit_history")
}

model UnitInventory {
  id              String        @id @default(uuid())
  unitId          String        @map("unit_id")
  quantity        Int           @default(1)
  itemDescription String        @map("item_description")
  itemLocation    String        @map("item_location")
  itemStatus      String        @default("Functional") @map("item_status")
  remarks         String?
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  unit            DhqLivingUnit @relation(fields: [unitId], references: [id], onDelete: Cascade)

  @@index([unitId])
  @@map("unit_inventory")
}

model UnitMaintenance {
  id              String        @id @default(uuid())
  unitId          String        @map("unit_id")
  recordType      String        @default("request") @map("record_type")
  maintenanceType String        @map("maintenance_type")
  description     String
  maintenanceDate DateTime      @default(now()) @map("maintenance_date") @db.Date
  performedBy     String        @map("performed_by")
  cost            Float?
  status          String        @default("Completed")
  priority        String        @default("Medium")
  remarks         String?
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  unit            DhqLivingUnit @relation(fields: [unitId], references: [id], onDelete: Cascade)

  @@index([unitId])
  @@index([recordType])
  @@index([recordType, status])
  @@map("unit_maintenance")
}

model AllocationRequest {
  id             String        @id @default(uuid())
  personnelId    String        @map("personnel_id")
  queueId        String       @map("queue_id")
  unitId         String        @map("unit_id")
  letterId       String        @unique @map("letter_id")
  personnelData  Json          @map("personnel_data")
  unitData       Json          @map("unit_data")
  allocationDate DateTime      @default(now()) @map("allocation_date")
  status         String        @default("pending")
  approvedBy     String?       @map("approved_by")
  approvedAt     DateTime?     @map("approved_at")
  refusalReason  String?       @map("refusal_reason")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  unit           DhqLivingUnit @relation(fields: [unitId], references: [id], onDelete: Cascade)
  queue          Queue        @relation(fields: [queueId], references: [id])

  @@index([status])
  @@index([personnelId])
  @@index([unitId])
  @@index([queueId])
  @@map("allocation_requests")
}

model StampSetting {
  id               String   @id @default(uuid())
  stampName        String   @map("stamp_name")
  stampRank        String   @map("stamp_rank")
  stampAppointment String   @map("stamp_appointment")
  copyTo           String?  @map("copy_to")
  stampNote        String?  @map("stamp_note")
  isActive         Boolean  @default(true) @map("is_active")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  @@index([isActive])
  @@map("stamp_settings")
}

model PastAllocation {
  id                  String                @id @default(uuid())
  personnelId         String                @map("personnel_id")
  queueId             String                @map("queue_id")
  unitId              String                @map("unit_id")
  letterId            String                @map("letter_id")
  personnelData       Json                  @map("personnel_data")
  unitData            Json                  @map("unit_data")
  allocationStartDate DateTime              @map("allocation_start_date") @db.Date
  allocationEndDate   DateTime?             @map("allocation_end_date") @db.Date
  durationDays        Int?                  @map("duration_days")
  reasonForLeaving    String?               @map("reason_for_leaving")
  deallocationDate    DateTime?             @map("deallocation_date")
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @updatedAt @map("updated_at")
  queue               Queue                 @relation(fields: [queueId], references: [id])
  unit                DhqLivingUnit         @relation(fields: [unitId], references: [id])
  clearanceInspections ClearanceInspection[]

  @@index([personnelId])
  @@index([unitId])
  @@index([queueId])
  @@map("past_allocations")
}

model ClearanceInspection {
  id                  String         @id @default(uuid())
  pastAllocationId    String         @map("past_allocation_id")
  inspectorSvcNo      String         @map("inspector_svc_no")
  inspectorName       String         @map("inspector_name")
  inspectorRank       String         @map("inspector_rank")
  inspectorCategory   String         @map("inspector_category")
  inspectorAppointment String        @map("inspector_appointment")
  inspectionDate      DateTime       @map("inspection_date") @db.Date
  remarks             String?
  inventoryStatus     Json           @map("inventory_status")
  createdAt           DateTime       @default(now()) @map("created_at")
  updatedAt           DateTime       @updatedAt @map("updated_at")
  pastAllocation      PastAllocation @relation(fields: [pastAllocationId], references: [id], onDelete: Cascade)

  @@index([pastAllocationId])
  @@index([inspectionDate])
  @@map("clearance_inspections")
}

model AllocationSequence {
  id    Int @id
  year  Int
  count Int
}

model AccommodationType {
  id               String          @id @default(uuid())
  name             String          @unique
  description      String?
  createdAt        DateTime        @default(now()) @map("created_at")
  dhq_living_units DhqLivingUnit[]

  @@map("accommodation_types")
}

model PagePermission {
  id             String   @id @default(uuid())
  profileId      String   @map("profile_id")
  pageKey        String   @map("page_key")
  pageTitle      String   @map("page_title")
  parentKey      String?  @map("parent_key")
  canView        Boolean  @default(true) @map("can_view")
  canEdit        Boolean  @default(false) @map("can_edit")
  canDelete      Boolean  @default(false) @map("can_delete")
  allowedActions String[] @default([]) @map("allowed_actions")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  profile        Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@unique([profileId, pageKey])
  @@index([profileId])
  @@index([pageKey])
  @@index([allowedActions])
  @@map("page_permissions")
}

enum AppRole {
  superadmin
  admin
  moderator
  user
}
