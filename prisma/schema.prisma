// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum AppRole {
  superadmin
  admin
  moderator
  user
}

// User and authentication tables
model User {
  id                String      @id @default(uuid())
  email             String      @unique
  hashedPassword    String      @map("hashed_password")
  emailVerified     DateTime?   @map("email_verified")
  image             String?
  accounts          Account[]
  sessions          Session[]
  profile           Profile?
  rolesAssigned     UserRole[]  @relation("AssignedRoles")
  rolesAssignedBy   UserRole[]  @relation("AssignedBy")
  createdAt         DateTime    @default(now()) @map("created_at")
  updatedAt         DateTime    @updatedAt @map("updated_at")

  @@map("users")
}

model Account {
  id                String  @id @default(uuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique @map("user_id")
  username  String   @unique
  fullName  String?  @map("full_name")
  role      AppRole  @default(user)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([username])
  @@map("profiles")
}

model UserRole {
  id         String    @id @default(uuid())
  userId     String    @map("user_id")
  role       AppRole
  assignedAt DateTime  @default(now()) @map("assigned_at")
  assignedBy String?   @map("assigned_by")
  user       User      @relation("AssignedRoles", fields: [userId], references: [id], onDelete: Cascade)
  assigner   User?     @relation("AssignedBy", fields: [assignedBy], references: [id], onDelete: SetNull)

  @@unique([userId, role])
  @@index([userId])
  @@map("user_roles")
}

// Queue management
model Queue {
  id                   String               @id @default(uuid())
  sequence             Int                  @unique
  fullName             String               @map("full_name")
  svcNo                String               @unique @map("svc_no")
  gender               String
  armOfService         String               @map("arm_of_service")
  category             String
  rank                 String
  maritalStatus        String               @map("marital_status")
  noOfAdultDependents  Int                  @default(0) @map("no_of_adult_dependents")
  noOfChildDependents  Int                  @default(0) @map("no_of_child_dependents")
  currentUnit          String?              @map("current_unit")
  appointment          String?
  dateTos              DateTime?            @map("date_tos") @db.Date
  dateSos              DateTime?            @map("date_sos") @db.Date
  phone                String?
  entryDateTime        DateTime             @default(now()) @map("entry_date_time")
  allocationRequests   AllocationRequest[]
  createdAt            DateTime             @default(now()) @map("created_at")
  updatedAt            DateTime             @updatedAt @map("updated_at")

  @@index([sequence])
  @@index([svcNo])
  @@map("queue")
}

// Unit management
model Unit {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("units")
}

model HousingType {
  id           String          @id @default(uuid())
  name         String          @unique
  description  String?
  livingUnits  DhqLivingUnit[]
  createdAt    DateTime        @default(now()) @map("created_at")

  @@map("housing_types")
}

model DhqLivingUnit {
  id                        String               @id @default(uuid())
  quarterName               String               @map("quarter_name")
  location                  String
  category                  String
  housingTypeId             String               @map("housing_type_id")
  noOfRooms                 Int                  @default(0) @map("no_of_rooms")
  status                    String               @default("Vacant")
  typeOfOccupancy           String               @default("Single") @map("type_of_occupancy")
  bq                        Boolean              @default(false)
  noOfRoomsInBq             Int                  @default(0) @map("no_of_rooms_in_bq")
  blockName                 String               @map("block_name")
  flatHouseRoomName         String               @map("flat_house_room_name")
  unitName                  String?              @map("unit_name")
  blockImageUrl             String?              @map("block_image_url")
  currentOccupantId         String?              @map("current_occupant_id")
  currentOccupantName       String?              @map("current_occupant_name")
  currentOccupantRank       String?              @map("current_occupant_rank")
  currentOccupantServiceNumber String?           @map("current_occupant_service_number")
  occupancyStartDate        DateTime?            @map("occupancy_start_date") @db.Date
  housingType               HousingType          @relation(fields: [housingTypeId], references: [id])
  occupants                 UnitOccupant[]
  history                   UnitHistory[]
  inventory                 UnitInventory[]
  maintenance               UnitMaintenance[]
  allocationRequests        AllocationRequest[]
  createdAt                 DateTime             @default(now()) @map("created_at")
  updatedAt                 DateTime             @updatedAt @map("updated_at")

  @@index([housingTypeId])
  @@index([status])
  @@index([unitName])
  @@map("dhq_living_units")
}

model UnitOccupant {
  id                 String        @id @default(uuid())
  unitId             String        @map("unit_id")
  fullName           String        @map("full_name")
  rank               String
  serviceNumber      String        @map("service_number")
  phone              String?
  email              String?
  emergencyContact   String?       @map("emergency_contact")
  occupancyStartDate DateTime      @default(now()) @map("occupancy_start_date") @db.Date
  isCurrent          Boolean       @default(true) @map("is_current")
  unit               DhqLivingUnit @relation(fields: [unitId], references: [id], onDelete: Cascade)
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @updatedAt @map("updated_at")

  @@index([unitId])
  @@index([isCurrent])
  @@map("unit_occupants")
}

model UnitHistory {
  id               String        @id @default(uuid())
  unitId           String        @map("unit_id")
  occupantName     String        @map("occupant_name")
  rank             String
  serviceNumber    String        @map("service_number")
  startDate        DateTime      @map("start_date") @db.Date
  endDate          DateTime?     @map("end_date") @db.Date
  durationDays     Int?          @map("duration_days")
  reasonForLeaving String?       @map("reason_for_leaving")
  unit             DhqLivingUnit @relation(fields: [unitId], references: [id], onDelete: Cascade)
  createdAt        DateTime      @default(now()) @map("created_at")

  @@index([unitId])
  @@map("unit_history")
}

model UnitInventory {
  id              String        @id @default(uuid())
  unitId          String        @map("unit_id")
  quantity        Int           @default(1)
  itemDescription String        @map("item_description")
  itemLocation    String        @map("item_location")
  itemStatus      String        @default("Functional") @map("item_status")
  note            String?
  unit            DhqLivingUnit @relation(fields: [unitId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  @@index([unitId])
  @@map("unit_inventory")
}

model UnitMaintenance {
  id               String        @id @default(uuid())
  unitId           String        @map("unit_id")
  maintenanceType  String        @map("maintenance_type")
  description      String
  maintenanceDate  DateTime      @default(now()) @map("maintenance_date") @db.Date
  performedBy      String        @map("performed_by")
  cost             Float?
  status           String        @default("Completed")
  priority         String        @default("Medium")
  notes            String?
  unit             DhqLivingUnit @relation(fields: [unitId], references: [id], onDelete: Cascade)
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")

  @@index([unitId])
  @@map("unit_maintenance")
}

// Allocation management
model AllocationRequest {
  id             String           @id @default(uuid())
  personnelId    String           @map("personnel_id")
  unitId         String           @map("unit_id")
  letterId       String           @unique @map("letter_id")
  personnelData  Json             @map("personnel_data")
  unitData       Json             @map("unit_data")
  allocationDate DateTime         @default(now()) @map("allocation_date")
  status         String           @default("pending")
  approvedBy     String?          @map("approved_by")
  approvedAt     DateTime?        @map("approved_at")
  refusalReason  String?          @map("refusal_reason")
  personnel      Queue            @relation(fields: [personnelId], references: [id], onDelete: Cascade)
  unit           DhqLivingUnit    @relation(fields: [unitId], references: [id], onDelete: Cascade)
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")

  @@index([status])
  @@index([personnelId])
  @@index([unitId])
  @@map("allocation_requests")
}

model StampSetting {
  id               String   @id @default(uuid())
  stampName        String   @map("stamp_name")
  stampRank        String   @map("stamp_rank")
  stampAppointment String   @map("stamp_appointment")
  stampNote        String?  @map("stamp_note")
  isActive         Boolean  @default(true) @map("is_active")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  @@index([isActive])
  @@map("stamp_settings")
}

model PastAllocation {
  id                 String    @id @default(uuid())
  personnelId        String    @map("personnel_id")
  unitId             String    @map("unit_id")
  letterId           String    @map("letter_id")
  personnelData      Json      @map("personnel_data")
  unitData           Json      @map("unit_data")
  allocationStartDate DateTime @map("allocation_start_date") @db.Date
  allocationEndDate  DateTime? @map("allocation_end_date") @db.Date
  durationDays       Int?      @map("duration_days")
  reasonForLeaving   String?   @map("reason_for_leaving")
  deallocationDate   DateTime? @map("deallocation_date")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  @@index([personnelId])
  @@index([unitId])
  @@map("past_allocations")
}